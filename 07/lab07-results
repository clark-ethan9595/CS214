Script started on Tue 05 Apr 2016 06:34:27 PM EDT
elc3@atanasoff:~/Documents/214/code/07/java$ cat Name.java
/* Name.java implements class Name.
 *
 * Begun by: Dr. Nelesen, CS 214 at Calvin College.
 * Completed by: Ethan Clark lab7
 * Date: March 31, 2016
 */

class Name
{

    private String myFirst, myMiddle, myLast;
 
    /***************************************************
     * Name constructs a name from three strings.      *
     * Receive: first, middle and last, three strings. *
     * Return: the triplet (first middle last).        *
     ***************************************************/
    
    public Name(String first, String middle, String last)
    {
	myFirst = first;
	myMiddle = middle;
	myLast = last;
    }
 
    /********************************************************
     * getFirst() extracts the first name of a Name object. *
     * Return: myFirst.                                     *
     ********************************************************/
    
    public String getFirst()
    {
	return myFirst;
    }
    
    /**********************************************************
     * getMiddle() extracts the middle name of a Name object. *
     * Return: myMiddle.                                      *
     **********************************************************/
    
    public String getMiddle()
    {
	return myMiddle;
    }
    
    /*******************************************************
     * getLast() extracts the last name of a Name object.  *
     * Return: myLast.                                     *
     *******************************************************/
    
    public String getLast()
    {
	return myLast;
    }
    
    /*****************************************************
     * getFullName() returns a full name in F-M-L order. *
     * Return: myFirst, myMiddle, myLast.                *
     *****************************************************/
    
    // Replace this line with the getFullName() definition
    // From my understanding of the lab instructions...
    // we do not need to create this function???
    
    
    /****************************************************
     * toString() displays a Name object.               *
     * Output: a String version of the name.            *
     ****************************************************/
    public String toString()
    {
	return myFirst + " " + myMiddle + " " + myLast;
    }
    
}
elc3@atanasoff:~/Documents/214/code/07/java$ cat NamerTest.java
/* NamerTest.java implements and tests class Name.
 * Created by: Dr. Nelesen
 ************************************************************/
import org.junit.runner.Result;
import org.junit.runner.JUnitCore;
import org.junit.runner.notification.Failure;

public class TestRunner{
    public static void main(String[] args) {

	Name aName = new Name("John", "Paul", "Jones");
	System.out.println(aName);
	
	//Commented out for first testing...

	// Class file for test class must be referenced in next line
	Result result = JUnitCore.runClasses(NamerTest.class);

	// Print information for each test that fails
	for (Failure failure : result.getFailures()) {
	    System.out.println(failure.toString());
	}

	//Print summative information
	if (result.wasSuccessful()){
	    System.out.println("All tests passed!");
	}
	else {
	    System.out.println("At least one test failed");
	}
    }
}



elc3@atanasoff:~/Documents/214/code/07/java$ cat TestRunner.java
/* A class to test the Name class
 * Created by: Dr. Nelesen
 *
 */

import org.junit.Test;
import static org.junit.Assert.*;


public class NamerTest  // a class used for JUnit testing...
{
    @Test
    public void testToString() {
	Name theName = new Name("John", "Paul", "Jones");
	assertEquals(theName.toString(), "John Paul Jones");
    }
    
    @Test
    public void testGetFirst(){
	Name theName = new Name("Johnna", "Paulina", "Jones");
	assertEquals(theName.getFirst(), "Johnna");
    }

    @Test
    public void testGetMiddle(){
	Name theName = new Name("Johnna", "Grace", "Jones");
	assertEquals(theName.getMiddle(), "Grace");
    }

    @Test
    public void testGetLast(){
	Name theName = new Name("Johnna", "Paulina", "Jones");
	assertEquals(theName.getLast(), "Jones");
    }	
}

elc3@atanasoff:~/Documents/214/code/07/java$ javac -cp /usr/share/java/junit4-4.11.jar:. TestRunner.java
elc3@atanasoff:~/Documents/214/code/07/java$ java -cp /usr/share/java/junit4-4.11.jar:. TestRunner
John Paul Jones
All tests passed!
elc3@atanasoff:~/Documents/214/code/07/java$ exit

Script done on Tue 05 Apr 2016 06:34:46 PM EDT
Script started on Tue 05 Apr 2016 06:37:08 PM EDT
elc3@atanasoff:~/Documents/214/code/07$ cat namer.adb
-- namer.adb "test-drives" the Name type.
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Ethan Clark lab7
-- Date: March 31, 2016
----------------------------------------------

with Ada.Text_IO; use Ada.Text_IO;

procedure namer is

  -- define a constant for the size/length of each first, middle, and last names
  NAME_SIZE : constant := 8;

  -- declare the Name type as a record with Strings myFirst, myMiddle, myLast
  type Name is record
	myFirst, myMiddle, myLast : String(1..NAME_SIZE);
  end record;

  -- define aName to be of type Name
  aName : Name ;

  ----------------------------------------------
  -- Init initializes a Name variable          -
  -- Receive: theName, the Name variable;      -
  --          First, the first name;           -
  --          Middle, the middle name;         -
  --          Last, the last name.             -
  -- Return: theName, its fields set to First, -
  --               Middle, and Last.           -
  ----------------------------------------------

  procedure Init (TheName: out Name; First, Middle, Last : in String) is

  begin

	TheName.MyFirst := First;
	TheName.MyMiddle := Middle;
	TheName.MyLast := Last;

  end Init;


  ----------------------------------------------
  -- getFirst(Name) retrieves Name.myFirst     -
  -- Receive: theName, a Name.                 -
  -- PRE: theName has been initialized.        -
  -- Return: theName.myFirst.                  -
  ----------------------------------------------

  function getFirst(TheName: in Name) return String is

  begin

	return TheName.MyFirst;

  end getFirst;


  ----------------------------------------------
  -- getMiddle(Name) retrieves Name.myMiddle   -
  -- Receive: theName, a Name.                 -
  -- PRE: theName has been initialized.        -
  -- Return: theName.myMiddle.                 -
  ----------------------------------------------

  function getMiddle(TheName: in Name) return String is

  begin

	return TheName.MyMiddle;

  end getMiddle;


  ----------------------------------------------
  -- getLast(Name) retrieves Name.myLast       -
  -- Receive: theName, a Name.                 -
  -- PRE: theName has been initialized.        -
  -- Return: theName.myLast.                   -
  ----------------------------------------------

  function getLast(TheName: in Name) return String is

  begin

	return TheName.MyLast;

  end getLast;


  -----------------------------------------------
  -- getFullName(Name) retrieves Name as a String  -
  -- Receive: theName, a Name.                  -
  -- PRE: theName has been initialized.         -
  -- Return: a String representation of theName -
  -----------------------------------------------

  function getFullName(TheName: in Name) return String is

  begin
	
	return TheName.MyFirst & " " & TheName.MyMiddle & " " & TheName.MyLast;

  end getFullName;

  ----------------------------------------------
  -- Put(Name) displays a Name value.          -
  -- PRE: theName has been initialized.        -
  -- Receive: theName, a Name.                 -
  -- Output: theName, to the screen.           -
  ----------------------------------------------

  procedure Put(TheName: in Name) is

  begin

	Put( TheName.MyFirst & " " & TheName.MyMiddle & " " & TheName.MyLast );

  end Put;


begin

   -- Create an instance of the Name record called aName
   Init(aName, "John    ", "Paul    ", "Jones   ");

   -- Test each Name record procedure or function here through assertions
   pragma Assert( getFirst(aName) = "John    ", "getFirst() failed");
   pragma Assert( getMiddle(aName) = "Paul    ", "getMiddle() failed");
   pragma Assert( getLast(aName) = "Jones   ", "getLast() failed");
   pragma Assert( getFullName(aName) = "John     Paul     Jones   ", 
                    "getFullName() failed");

   Put(aName); New_line;

   -- If all tests pass...
   Put("All tests passed!"); New_line;

end namer;

elc3@atanasoff:~/Documents/214/code/07$ gnatmake namer.adb
gcc-4.6 -c namer.adb
gnatbind -x namer.ali
gnatlink namer.ali
elc3@atanasoff:~/Documents/214/code/07$ ./namer
John     Paul     Jones   
All tests passed!
elc3@atanasoff:~/Documents/214/code/07$ exit

Script done on Tue 05 Apr 2016 06:37:23 PM EDT
;;; namer.el simulates and tests an e-LISP Name type.
;;; Begun by: Dr. Adams, CS 214 at Calvin College.
;;; Completed by: Ethan Clark Lab7
;;; Date: March 31, 2016


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Name constructs a name from three strings.      ;;
;;; Receive: first, middle and last, three strings. ;;
;;; Return: the triplet (first middle last).        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun Name (first middle last)
  (list first middle last))
Name


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; getFirst extracts the first name of a name object.;
;;; Receive: theName, a Name.                       
;;; Return: the first string in theName.           
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun getFirst (theName)
  (car theName))
getFirst


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; getMiddle extracts the middle name of a name object.
;;; Receive: theName, a Name.                      
;;; Return: the second string in theName.           
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun getMiddle (theName)
  (car (cdr theName)))
getMiddle


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; getLast extracts the last name of a name object.
;;; Receive: theName, a Name.                    
;;; Return: the third string in theName.       
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun getLast (theName)
  (car (cdr (cdr theName))))
getLast


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; getFullName returns a full name in F-M-L order. 
;;; Return: myFirst, myMiddle, myLast.           
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun getFullName(theName)
  (concat (getFirst theName) " " (getMiddle theName) " " (getLast theName)))
getFullName


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; printName displays a name object.         
;;; Receive: theName, a Name,                 
;;;          buffer, the name of a buffer.   
;;; Output: the strings in theName to buffer. ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun printName(theName buf)
  (princ (getFullName theName) buf)
  (setq name theName))
printName

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; A simple driver for our Name functions. ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(progn
  (require 'cl)                              ; assert
  (setq aName (Name "John" "Paul" "Jones"))  ; build a Name

  (assert (equal (getFirst aName) "John" ))  ; test it
  (assert (equal (getMiddle aName) "Paul" ))
  (assert (equal (getLast aName) "Jones" ))

  (assert (equal (getFullName aName) "John Paul Jones" ))

  (setq buf (get-buffer "namer.el"))         ; buf = this buffer

  (assert (eq (printName aName buf) aName) ) ; output
  (terpri buf)                               ; newline

  (princ "All tests passed!")                ; feedback
  (terpri buf))                              ; newline
John Paul Jones
All tests passed!
t
Script started on Tue 05 Apr 2016 07:09:36 PM EDT
elc3@atanasoff:~/Documents/214/code/07$ cat namer.rb
# namer.rb tests class Name and its operations
#
# Begun by: Dr. Adams, for CS 214 at Calvin College.
# Completed by: Serita Nelesen and Ethan Clark Lab7
# Date: March 31, 2016
####################################################

require 'test/unit/assertions'   # needed for assert
include Test::Unit::Assertions

class Name

   # Define the function initialize() to initialize the members of the Name class
   def initialize(first, middle, last)
	@first, @middle, @last = first, middle, last
   end

   # shortcut to define all the "getters" for the Name class
   attr_reader :first, :middle, :last

   # Define the function fullName() to return the full name of a type Name
   def fullName()
	return first + " " + middle + " " + last
   end

   # Define print() to print the full name to the screen
   def print()
	puts ( fullName() )
	return fullName()
   end

end

# testName tests all the operations in the class Name
def testName
   
   # Define name to be a new Name type
   name = Name.new("John", "Paul", "Jones")

   # test the accessors for the Name class
   assert name.first == "John", "first failed"
   assert name.middle == "Paul", "middle failed"
   assert name.last == "Jones", "last failed"

   # test the function fullName() in the Name class
   assert name.fullName == "John Paul Jones", "fullName failed"

   # test the print() function in the Name class
   assert name.print == "John Paul Jones", "print failed"
   
   print "All tests passed!\n"

end

testName

elc3@atanasoff:~/Documents/214/code/07$ ruby namer.rb
John Paul Jones
All tests passed!
elc3@atanasoff:~/Documents/214/code/07$ exit

Script done on Tue 05 Apr 2016 07:09:48 PM EDT
