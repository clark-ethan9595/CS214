Script started on Thu 21 Apr 2016 09:17:52 PM EDT
elc3@hollerith:~/Documents/214/code/10/java$ cat Bird.java
/* Bird.java provides class Bird.
 *
 * Begun by: Dr. Nelesen, CS 214 at Calvin College.
 * Completed by: Ethan Clark Lab10
 * Date: April 21, 2016
 */

public class Bird {

    private String myName;

    /*********************************
    * Constructor for Bird Class     *
    * Set name to myName             *
    *********************************/
    public Bird(String name)
    {
	myName = name;
    }
   
    /*********************************
    * Accessor for Bird Class        *
    * Receive: NONE                  *
    * Return: myName                 *
    *********************************/
    public String getName()
    {
	return myName;
    }
   

    /***********************************************
    * call() returns the call of the current Bird  *
    * Receive: NONE                                *
    * Return: "Squaaaaaaaaaaaaaawk!"               *
    ***********************************************/
    public String call()
    {
	return "Squaaaaaaaaaaawk!";
    }
   

    /*********************************************************
    * print() returns the Bird name and its call             * 
    * Receive: NONE                                          *
    * Return: Returns the Bird name, Bird type and its call  *
    *********************************************************/
    public void print()
    {
	System.out.println(getName() + ' ' + getClass().getName() +
					" says " + call());
    }
   
}
elc3@hollerith:~/Documents/214/code/10/java$ cat Duck,java
cat: Duck,java: No such file or directory
elc3@hollerith:~/Documents/214/code/10/java$ cat   t Duck.java
/* Duck.java models a Duck
 *
 * Begun by: Dr. Nelesen, CS 214 at Calvin College.
 * Completed by: Ethan Clark Lab10
 * Date: April 21, 2016
 */

public class Duck extends Bird
{

	/**********************************************
	* Constructor for the child Duck class        *
	* Sets name to be myName in the parent class  *
	**********************************************/
	public Duck(String name)
	{
		super(name);
	}

	/**********************************************
	* call() returns the sound for the Duck class *
	* Receive: NONE                               *
	* Return: "Quack!"                            *
	**********************************************/
	public String call()
	{
		return "Quack!";
	}
}
elc3@hollerith:~/Documents/214/code/10/java$ cat Goose.java
/* Goose.java models a Goose
 *
 * Begun by: Dr. Nelesen, CS 214 at Calvin College.
 * Completed by: Ethan Clark Lab10
 * Date: April 21, 2016
 */

public class Goose extends Bird
{

	/**********************************************
	* Constructor for the child Goose class       *
	* Sets name to be myName in the parent class  *
	**********************************************/
	public Goose(String name)
	{
		super(name);
	}

	/***********************************************
	* call() returns the sound for the Goose class *
	* Receive: NONE                                *
	* Return: "Honk!"                              *
	***********************************************/
	public String call()
	{
		return "Honk!";
	}

}
elc3@hollerith:~/Documents/214/code/10/java$ cat Owl.java
/* Owl.java models an Owl
 *
 * Begun by: Dr. Nelesen, CS 214 at Calvin College.
 * Completed by: Ethan Clark Lab10
 * Date: April 21, 2016
 */

public class Owl extends Bird
{

	/**********************************************
	* Constructor for the child Owl class         *
	* Sets name to be myName in the parent class  *
	**********************************************/
	public Owl(String name)
	{
		super(name);
	}

	/***********************************************
	* call() returns the sound for the Owl class   *
	* Receive: NONE                                *
	* Return: "Whoot!"                             *
	***********************************************/
	public String call()
	{
		return "Whoot!";
	}

}
elc3@hollerith:~/Documents/214/code/10/java$ cat Birds.java
/* Birds.java illustrates inheritance and polymorphism.
 *
 * Begun by: Dr. Nelesen, CS 214 at Calvin College.
 * Completed by: Ethan Clark Lab10
 * Date: April 21, 2016
 */

public class Birds{

    public static void main (String[] args){
	
	//Bird bird1 = new Bird();

	// Test the Parent Bird class
	Bird bird1 = new Bird("Hawkeye");
	System.out.println(bird1.getName());
	System.out.println(bird1.call());
	bird1.print();

	// Test the Duck child class
	Duck bird2 = new Duck("Donald");
	bird2.print();

	// Test the Goose child class
	Goose bird3 = new Goose("Mother");
	bird3.print();

	// Test the Owl child class
	Owl bird4 = new Owl("Woodsey");
	bird4.print();
    }

}
elc3@hollerith:~/Documents/214/code/10/java$ javac Birds.java
elc3@hollerith:~/Documents/214/code/10/java$ java Birds
Hawkeye
Squaaaaaaaaaaawk!
Hawkeye Bird says Squaaaaaaaaaaawk!
Donald Duck says Quack!
Mother Goose says Honk!
Woodsey Owl says Whoot!
elc3@hollerith:~/Documents/214/code/10/java$ exit

Script done on Thu 21 Apr 2016 09:18:20 PM EDT
Script started on Fri 22 Apr 2016 09:04:07 AM EDT
elc3@boole:~/Documents/214/code/10/ada$ cat bird_package.adb
-- bird_package.adb gives Bird-related definitions
--
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Ethan Clark Lab10
-- Date: April 22, 2016
---------------------------------------------------

with Ada.Text_IO;
use Ada.Text_IO;

package body Bird_Package is


 	----------------------------------------------------
 	-- initialization                                  -
 	-- Receive: A_Bird, a Bird_Type;                   -
 	--          Name, a String                         -
 	-- Return: a Bird_Type in which My_Name = Name.    -
 	----------------------------------------------------
	procedure Init(A_Bird : out Bird_Type; Name: in String) is
	begin
		A_Bird.My_Name := Name;
	end Init;

 	----------------------------------------------------
 	-- Name accessor                                   -
 	-- Receive: A_Bird, a Bird_Type.                   -
 	-- Return: A_Bird.My_Name.                         -
 	----------------------------------------------------
	function Name(A_Bird : in Bird_Type) return String is
	begin
		return A_Bird.My_Name;
	end Name;

	----------------------------------------------------
 	-- A Bird's Call                                   -
 	-- Receive: A_Bird, a Bird_Type.                   -
 	-- Return: a default bird-call ("Squawk!").        -
 	----------------------------------------------------
	function Call(A_Bird : in Bird_Type) return String is
	begin
		return "Squawwwwwwwwwk!";
	end Call;

 	----------------------------------------------------
 	-- Determine type of a Bird (for derived types)    -
 	-- Receive: A_Bird, a Bird_Type.                   -
 	-- Return: "Bird".                                 -
 	----------------------------------------------------
	function Type_Name(A_Bird: in Bird_Type) return String is
	begin
		return "Bird";
	end Type_Name;

 	----------------------------------------------------
 	-- Output a Bird                                   -
 	-- Receive: A_Bird, a Bird or subclass of Bird.    -
 	-- Output: Everything known about A_Bird           -
 	----------------------------------------------------
	procedure Put(A_Bird : in Bird_Type'Class) is
	begin
		Put( Name(A_Bird) );
		Put( ' ' );
		Put( Type_Name(A_Bird) );
		Put( " says " );
		Put( Call(A_Bird) );
	end Put;

end Bird_Package;

elc3@boole:~/Documents/214/code/10/ada$ cat Bir   bird_package.ads
-- bird_package.ads gives Bird-related declarations
--
-- Begun by: Dr. Adams, for CS 214 at Calvin College.
-- Completed by: Ethan Clark Lab10
-- Date: April 22, 2016
---------------------------------------------------

package Bird_Package is

	type Bird_Type is tagged private;

 	----------------------------------------------------
 	-- initialization                                  -
 	-- Receive: A_Bird, a Bird_Type;                   -
 	--          Name, a String                         -
 	-- Return: a Bird_Type whose My_Name = Name.       -
 	----------------------------------------------------
	procedure Init(A_Bird : out Bird_Type; Name: in String);
 	----------------------------------------------------
 	-- Name accessor                                   -
 	-- Receive: A_Bird, a Bird_Type.                   -
 	-- Return: A_Bird.My_Name.                         -
 	----------------------------------------------------
	function Name(A_Bird : in Bird_Type) return String;

 	----------------------------------------------------
 	-- A Bird's Call                                   -
 	-- Receive: A_Bird, a Bird_Type.                   -
 	-- Return: a default bird-call ("Squawk!").        -
 	----------------------------------------------------
	function Call(A_Bird : in Bird_Type) return String;

 	----------------------------------------------------
 	-- Determine type of a Bird (for derived types)    -
 	-- Receive: A_Bird, a Bird_Type.                   -
 	-- Return: "Bird".                                 -
 	----------------------------------------------------
	function Type_Name(A_Bird: in Bird_Type) return String;

 	----------------------------------------------------
 	-- Output a Bird                                   -
 	-- Receive: A_Bird, a Bird or subclass of Bird.    -
 	-- Output: Everything known about A_Bird           -
 	----------------------------------------------------
	procedure Put(A_Bird : in Bird_Type'Class);

private

	-- Declare the private Bird_Type record
	type Bird_Type is tagged record
		My_Name : String(1..6);
	end record;

end Bird_Package;
elc3@boole:~/Documents/214/code/10/ada$ cat duck_package.adb
-- duck_package.adb gives Duck-related definitions
--  by over-riding Bird-related definitions.
--
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Ethan Clark Lab10
-- Date: April 22, 2016
---------------------------------------------------

with Ada.Text_IO;
use Ada.Text_IO;

package body Duck_Package is

 	----------------------------------------------------
 	-- A Duck's Call (Over-rides Bird.Call())          -
 	-- Receive: A_Duck, a Duck_Type.                   -
 	-- Return: "Quack!"                                -
 	----------------------------------------------------
	function Call(A_Duck : in Duck_Type) return String is
	begin
		return "Quack!";
	end Call;


 	------------------------------------------------------------
 	-- Determine type of a Duck (Over-rides Bird.Type_Name()) -
 	-- Receive: A_Duck, a Duck_Type.                          -
 	-- Return: "Duck".                                        -
 	-----------------------------------------------------------
	function Type_Name(A_Duck : in Duck_Type) return String is
	begin
		return "Duck";
	end Type_Name;


end Duck_Package;
elc3@boole:~/Documents/214/code/10/ada$ cat duck_package.ads
-- duck_package.ads gives Duck-related declarations,
--
--  and derives Duck from Bird.
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Ethan Clark Lab10
-- Date: April 22, 2016
---------------------------------------------------

with Bird_Package; use Bird_Package;

package Duck_Package is

	type Duck_Type is new Bird_Type with private;

 	----------------------------------------------------
 	-- A Duck's Call (Over-rides Bird.Call())          -
 	-- Receive: A_Duck, a Duck_Type.                   -
 	-- Return: "Quack!"                                -
 	----------------------------------------------------
	function Call(A_Duck : in Duck_Type) return String;

 	------------------------------------------------------------
 	-- Determine type of a Duck (Over-rides Bird.Type_Name()) -
 	-- Receive: A_Duck, a Duck_Type.                          -
 	-- Return: "Duck".                                        -
 	-----------------------------------------------------------
	function Type_Name(A_Duck : in Duck_Type) return String;

private

	-- Declare Duck_Type record in the private section
	-- and to inherit Bird_Type details as well
	type Duck_Type is new Bird_Type with
	record
		null;
	end record;

end Duck_Package;
elc3@boole:~/Documents/214/code/10/ada$ cat Goo   goose_package.adb
-- goose_package.adb gives Goose-related definitions
--  by over-riding Bird-related definitions.
--
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Ethan Clark Lab10
-- Date: April 22, 2016
---------------------------------------------------

with Ada.Text_IO;
use Ada.Text_IO;

package body Goose_Package is

 	----------------------------------------------------
 	-- A Goose's Call (Over-rides Bird.Call())         -
 	-- Receive: A_Goose, a Goose_Type.                 -
 	-- Return: "Honk!"                                 -
 	----------------------------------------------------
	function Call(A_Goose : in Goose_Type) return String is
	begin
		return "Honk!";
	end Call;

 	-----------------------------------------------------
 	-- Determine type of a Goose                        -
 	-- (Over-rides Bird.Type_Name())                    -
 	-- Receive: A_Goose, a Goose_Type.                  -
 	-- Return: "Goose".                                 -
 	-----------------------------------------------------
	function Type_Name(A_Goose : in Goose_Type) return String is
	begin
		return "Goose";
	end Type_Name;


end Goose_Package;
elc3@boole:~/Documents/214/code/10/ada$ cat goose_package.ads
-- goose_package.ads gives Goose-related declarations,
--
--  and derives Goose from Bird.
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Ethan Clark Lab10
-- Date: April 22, 2016
---------------------------------------------------

with Bird_Package; use Bird_Package;

package Goose_Package is

 	type Goose_Type is new Bird_Type with private;

 	----------------------------------------------------
 	-- A Goose's Call (Over-rides Bird.Call())         -
 	-- Receive: A_Goose, a Goose.                      -
 	-- Return: "Honk!"                                 -
 	----------------------------------------------------
	function Call(A_Goose : in Goose_Type) return String;

 	-----------------------------------------------------
 	-- Determine type of a Goose                        -
 	-- (Over-rides Bird.Type_Name())                    -
 	-- Receive: A_Goose, a Goose.                       -
 	-- Return: "Goose".                                 -
 	-----------------------------------------------------
	function Type_Name(A_Goose : in Goose_Type) return String;

private

	-- Declare Goose_Type record in the private section
	-- and to inherit Bird_Type details as well
	type Goose_Type is new Bird_Type with
	record
		null;
	end record;


end Goose_Package;
elc3@boole:~/Documents/214/code/10/ada$ cat owl_Pa  p[ ackage.ads
-- owl_package.ads gives Owl-related declarations,
--  and derives Owl from Bird.
--
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Ethan Clark Lab10
-- Date: April 22, 2016
---------------------------------------------------

with Bird_Package; use Bird_Package;

package Owl_Package is

	type Owl_Type is new Bird_Type with private;

 	----------------------------------------------------
 	-- A Owl's Call (Over-rides Bird.Call())           -
 	-- Receive: An_Owl, an Owl_Type.                   -
 	-- Return: "Whoo!"                                 -
 	----------------------------------------------------
	function Call(A_Owl : in Owl_Type) return String;

 	-----------------------------------------------------
 	-- Determine type of a Owl                          -
 	-- (Over-rides Bird.Type_Name())                    -
 	-- Receive: An_Owl, an Owl_Type.                    -
 	-- Return: "Owl".                                   -
 	-----------------------------------------------------
	function Type_Name(A_Owl : in Owl_Type) return String;

private

	-- Declare Owl_Type record in the private section
	-- and to inherit Bird_Type details as well
	type Owl_Type is new Bird_Type with
	record
		null;
	end record;


end Owl_Package;
elc3@boole:~/Documents/214/code/10/ada$ cat owl_pak ckage.ads b
-- owl_package.adb gives Owl-related definitions
--  by over-riding Bird-related definitions.
--
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Ethan Clark Lab10
-- Date: April 22, 2016
---------------------------------------------------

with Ada.Text_IO;
use Ada.Text_IO;

package body Owl_Package is

 	----------------------------------------------------
 	-- A Owl's Call (Over-rides Bird.Call())           -
 	-- Receive: An_Owl, an Owl_Type.                   -
 	-- Return: "Whoo!"                                 -
 	----------------------------------------------------
	function Call(A_Owl : in Owl_Type) return String is
	begin
		return "Whoot!";
	end Call;

 	-----------------------------------------------------
 	-- Determine type of a Owl                          -
 	-- (Over-rides Bird.Type_Name())                    -
 	-- Receive: An_Owl, an Owl_Type.                    -
 	-- Return: "Owl".                                   -
 	-----------------------------------------------------
	function Type_Name(A_Owl : in Owl_Type) return String is
	begin
		return "Owl";
	end Type_Name;

end Owl_Package;
elc3@boole:~/Documents/214/code/10/ada$ cat Birds     birds.adb
-- birds.adb tests our Birds type
--
-- Begun by: Dr. Adams, CS 214 at Calvin College
-- Completed by: Ethan Clark Lab10
-- Date: April 22, 2016
-----------------------------------------------------

with Ada.Text_IO, Bird_Package, Duck_Package, Goose_Package, Owl_Package;
use Ada.Text_IO, Bird_Package, Duck_Package, Goose_Package, Owl_Package;


procedure Birds is

 	Bird1 : Bird_Type;       -- base class
 	Bird2 : Duck_Type;       -- derived class 1
 	Bird3 : Goose_Type;      -- derived class 2
 	Bird4 : Owl_Type;        -- derived class 3

begin
	Init(Bird1, "Tweety");
	Put(Bird1); New_Line;

	Init(Bird2, "Donald");
	Put(Bird2); New_Line;

	Init(Bird3, "Mother");
	Put(Bird3); New_Line;

	Init(Bird4, "Woodsy");
	Put(Bird4); New_Line;

 	New_Line;
end Birds;

elc3@boole:~/Documents/214/code/10/ada$ gnatmake birds.adb
gcc-4.8 -c birds.adb
gcc-4.8 -c duck_package.adb
gnatbind -x birds.ali
gnatlink birds.ali
elc3@boole:~/Documents/214/code/10/ada$ ./birds
Tweety Bird says Squawwwwwwwwwk!
Donald Duck says Quack!
Mother Goose says Honk!
Woodsy Owl says Whoot!

elc3@boole:~/Documents/214/code/10/ada$ exit

Script done on Fri 22 Apr 2016 09:05:08 AM EDT
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; lab10.el practices some interesting eLisp characteristics
;;; Ethan Clark Lab10 CS 214
;;; April 25, 2016

;;; Practice
(lambda (x) (+ x x) )
(lambda (x) (+ x x))

((lambda (x) (+ x x)) 17)
34

;;; Exercise 1a
(lambda (x y z a) (max (abs x) (abs y) (abs z) (abs a)))
(lambda (x y z a) (max (abs x) (abs y) (abs z) (abs a)))

((lambda (x y z a) (max (abs x) (abs y) (abs z) (abs a))) 30 10 20 -100)
100

;;; Exercise 1b
((lambda (x y z) (+ x y z)) 10 16 -4)
22
((lambda (x) (null x)) 100)
nil
((lambda () 17.2))
17.2

;;; Practice
(function abs)
abs
#'abs
abs

;;; Passing functions as parameters practice
(setq double (function (lambda (x) (+ x x)) ))
(lambda (x) (+ x x))
(double 11)
(funcall double 11)
22

;;; Lambda function that triples its parameter
(setq triple (function (lambda (x) (+ x x x)) ))
(lambda (x) (+ x x x))
(funcall triple 11)
33

;;; More Practice
(apply #'+ '(1 2 3))
6
(apply #'+ 1 2 '(3 4 5))
15
(funcall #'+ 1 2 3 4)
10
(funcall #'cons 'a 'b)
(a . b)
(mapcar #'evenp '(1 2 3 4))
(mapcar #'oddp '(1 2 3 4))
(defun subtract-n (n list)
  (mapcar #'(lambda (x) (- x n)) list))
subtract-n
(subtract-n 2 '(2 4 6))
(0 2 4)

;;; Exercise 2
(defun sum-squares (list)
  (apply #'+ (mapcar #'(lambda (x) (* x x)) list)))
sum-squares
(sum-squares '(1 2 3))
14
(sum-squares '(1 2 3 4 5))
55
(sum-squares '(-1 -2 -3 0 1))
15



Script started on Fri 22 Apr 2016 09:16:27 AM EDT
elc3@boole:~/Documents/214/code/10/ruby$ cat Bird.rb
# Bird.rb | Defines a Bird superclass to be extended by specific bird
#   sub-classes.
#
# Begun by: Dr. Nelesen, for CS 214 at Calvin College.
# Completed by: Ethan Clark Lab10
# Date: April 22, 2016
####################################################

class Bird

	# Define the getter for the name data for the Bird class
  	attr_reader :name

	######################################################
	# initialize(name) creates an instance of class Bird #
	# Recieve: name, a String                            #
	# Output: a Bird type has been initialized with name #
	######################################################
  	def initialize(name)
    		@name = name
  	end

	######################################################
	# call returns the sound that a Bird type makes      #
	# Recieve: NONE                                      #
	# Return: Squaaaaaaaaaaawk!, a String                #
	######################################################
	def call
		"Squaaaaaaawk!"
	end

	######################################################
	# className returns the name of the Class, Bird      #
	# Recieve: NONE                                      #
	# Return: Bird                                       #
	######################################################
	def className
		self.class.to_s
	end

	##################################################################
	# print returns name, class Name, and the sound a Bird makes     #
	# Recieve: NONE                                                  #
	# Return: a String with name, class Name, and the sound          #
	##################################################################
	def print
		puts name + " " + className + " says " + call
	end
end
elc3@boole:~/Documents/214/code/10/ruby$ cat Owl.rb
# Owl.rb | Defines the Owl class which inherits attributes and methods
#   from the Bird superclass.
#
# Begun by: Dr. Nelesen, for CS 214 at Calvin College.
# Completed by: Ethan Clark Lab10
# Date: April 22, 2016
####################################################

require './Bird.rb'

class Owl < Bird

	######################################################
	# call returns the sound that a Owl type makes       #
	# Recieve: NONE                                      #
	# Return: Whoot!, a String                           #
	######################################################
	def call
		"Whoot!"
	end

end
elc3@boole:~/Documents/214/code/10/ruby$ cat Duck.rb
# Duck.rb | Defines the Duck class which inherits attributes and methods
#   from the Bird superclass.
#
# Begun by: Dr. Nelesen, for CS 214 at Calvin College.
# Completed by: Ethan Clark Lab10
# Date: April 22, 2016
####################################################

require './Bird.rb'

class Duck < Bird

	######################################################
	# call returns the sound that a Duck type makes      #
	# Recieve: NONE                                      #
	# Return: Quack!, a String                           #
	######################################################
	def call
		"Quack!"
	end

end
elc3@boole:~/Documents/214/code/10/ruby$ cat Goose.rb
# Goose.rb | Defines the Goose class which inherits attributes and methods
#   from the Bird superclass.
#
# Begun by: Dr. Nelesen, for CS 214 at Calvin College.
# Completed by: Ethan Clark Lab10
# Date: April 22, 2016
####################################################

require './Bird.rb'

class Goose < Bird

	######################################################
	# call returns the sound that a Goose type makes     #
	# Recieve: NONE                                      #
	# Return: Honk!, a String                            #
	######################################################
	def call
		"Honk!"
	end

end
elc3@boole:~/Documents/214/code/10/ruby$ cat birds.rb
# birds.rb | Tests out the menagerie of bird classes.
#
# Begun by: Dr. Nelesen, for CS 214 at Calvin College.
# Completed by: Ethan Clark Lab10
# Date: April 22, 2016
######################################################

require './Duck.rb'
require './Goose.rb'
require './Owl.rb'

bird0 = Bird.new "Hawkeye"
bird0.print

bird1 = Duck.new "Donald"
bird1.print

bird2 = Goose.new "Mother"
bird2.print

bird3 = Owl.new "Woodsey"
bird3.print
elc3@boole:~/Documents/214/code/10/ruby$ ruby birds.rb
Hawkeye Bird says Squaaaaaaawk!
Donald Duck says Quack!
Mother Goose says Honk!
Woodsey Owl says Whoot!
elc3@boole:~/Documents/214/code/10/ruby$ exit

Script done on Fri 22 Apr 2016 09:16:44 AM EDT
